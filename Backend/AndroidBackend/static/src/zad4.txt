activity_change_currency.xml:

<ListView xmlns:android="http://schemas.android.com/apk/res/android"
          android:id="@+id/list"
          android:layout_width="match_parent"
          android:layout_height="match_parent"/>


ListCurrenciesActivity:

public class ListCurrenciesActivity extends Activity {

	@InjectView(R.id.list)
	protected ListView currencyListView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_change_currency);
		ButterKnife.inject(this);
	}
}


Dodajemy do build.gradle w tagu dependencies:

compile 'com.jakewharton:butterknife:+'


Dodajemy do MainActivity otwieranie nowej aktywności po naciśnięciu buttona.
W metodzie onCreate() dodajemy:

changeCurrencyButton.setOnClickListener(new View.OnClickListener() {
	@Override
	public void onClick(View v) {
		Intent i = new Intent(getApplicationContext(), ListCurrenciesActivity.class);
		startActivity(i);
	}
});


Dodajemy nową aktywność do manifestu.
<activity android:name=".ListCurrenciesActivity" />


Tworzymy layout dla pojedyńczego elementu listy:
item_currency_list.xml:

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:orientation="horizontal">

    <ImageView
		android:id="@+id/flag"
		android:layout_width="36dp"
		android:layout_height="36dp"
		android:src="@drawable/money" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <TextView
            android:id="@+id/currencyName"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:paddingLeft="6dp"
            android:text="Name"
            android:textAppearance="?android:attr/textAppearanceMedium"/>

        <TextView
            android:id="@+id/averageRate"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:paddingLeft="6dp"
            android:text="1 EUR 4 PLN"
            android:textAppearance="?android:attr/textAppearanceSmall"/>
    </LinearLayout>
</LinearLayout>

Grafika money dostępna jest na serwerze z zadaniami.


JSON otrzymywany z serwisu:

{
	"date" : "2015-04-02",
	"base" : {
		"currency" : "Dollar",
		"country" : "United States"
	},
	"rates" : [{
			"currency" : "Rupiah",
			"rate" : 13001.44,
			"country" : "Indonesia"
		}
	]
}


Na podstawie json’a tworzymy klasy modelu:

ExchangeRate:

public class ExchangeRate implements Serializable {

	private final String currency;
	private final String country;
	private Float rate;

	public ExchangeRate(String currency, String country, Float rate) {
		this.currency = currency;
		this.country = country;
		this.rate = rate;
	}

	public String getCurrency() {
		return currency;
	}

	public String getCountry() {
		return country;
	}

	public Float getRate() {
		return rate;
	}

	public void setRate(Float rate) {
		this.rate = rate;
	}
}

RatesList:

public class RatesList {

	private final String date;
	private final ExchangeRate base;
	private final List<ExchangeRate> rates;

	public RatesList(String date, ExchangeRate base, List<ExchangeRate> exchangeRates) {
		this.date = date;
		this.base = base;
		this.rates = exchangeRates;
	}

	public List<ExchangeRate> getExchangeRates() {
		return rates;
	}
}


Tworzymy adapter dla listy:

CurrencyListAdapter:

public class CurrencyListAdapter extends BaseAdapter {

	private final Context context;
	private final List<ExchangeRate> exchangeRates;
	private final LayoutInflater inflater;

	public CurrencyListAdapter(Context context, RatesList ratesList) {
		this.context = context;
		exchangeRates = ratesList.getExchangeRates();
		inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}

	@Override
	public int getCount() {
		return exchangeRates.size();
	}

	@Override
	public ExchangeRate getItem(int position) {
		return exchangeRates.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		return convertView;
	}
}


Dodajemy klasę wewnętrzną.
ViewHolder:

protected class ViewHolder {
	@InjectView(R.id.currencyName)
	TextView currencyName;
	@InjectView(R.id.averageRate)
	TextView averageRate;

	private ViewHolder(View rootView) {
		ButterKnife.inject(this, rootView);
	}

protected void populate(ExchangeRate exchangeRate) {
		currencyName.setText(exchangeRate.getCountry() + " " + exchangeRate.getCurrency());
	    averageRate.setText(exchangeRate.getRate().toString());
	}
}


Definiujemy jak wypełniany ma być element listy.
W metodzie getView() dodajemy:

@Override
public View getView(int position, View convertView, ViewGroup parent) {
	ViewHolder vh;
	if (convertView == null) {
		convertView = inflater.inflate(R.layout.item_currency_list, parent, false);
		vh = new ViewHolder(convertView);
		convertView.setTag(vh);
	} else {
		vh = (ViewHolder) convertView.getTag();
	}

	ExchangeRate exchangeRate = getItem(position);
	vh.populate(exchangeRate);

	return convertView;
}


Ważne, by przy inflatowaniu podać jako parametr attacheToRoot „false”(pogrubione w powyższym listingu), ponieważ adapter pod spodem robi to za nas, więc podpięcie samodzielnie spowalnia cały proces.


Tworzymy dane testowe i dodajemy adapter do listy w ListCurrenciesActivity w metodzie onCreate():

MockData:

public class MockData {

	private static RatesList ratesList;

	public static RatesList getListOfRates() {
		if (ratesList == null) {
			List<ExchangeRate> rates = new ArrayList<>();
			rates.add(new ExchangeRate("Dollar", "Australia", 0.3431f));
			rates.add(new ExchangeRate("Lev", "Bulgaria", 0.4724f));
			rates.add(new ExchangeRate("Real", "Brazil", 0.7974f));
			rates.add(new ExchangeRate("Dollar", "Canada", 0.3326f));
			rates.add(new ExchangeRate("Franc", "Switzerland", 0.2584f));
			rates.add(new ExchangeRate("Yuan Renminbi", "China", 1.676f));
			rates.add(new ExchangeRate("Koruna", "Czech Republic", 6.6242f));
			rates.add(new ExchangeRate("Krone", "Denmark", 1.8007f));
			rates.add(new ExchangeRate("Pound", "United Kingdom", 0.1752f));
			rates.add(new ExchangeRate("Dollar", "Hong Kong", 2.0737f));
			rates.add(new ExchangeRate("Kuna", "Croatia", 1.85f));
			rates.add(new ExchangeRate("Forint", "Hungary", 73.764f));
			rates.add(new ExchangeRate("Rupiah", "Indonesia", 3469.59f));
			rates.add(new ExchangeRate("Shekel", "Israel", 1.0694f));
			rates.add(new ExchangeRate("Rupee", "India", 16.646f));
			rates.add(new ExchangeRate("Yen", "Japan", 32.152f));
			rates.add(new ExchangeRate("Won", "Korea (South)", 294.43f));
			rates.add(new ExchangeRate("Peso", "Mexico", 4.0236f));
			rates.add(new ExchangeRate("Ringgit", "Malaysia", 0.9763f));
			rates.add(new ExchangeRate("Krone", "Norway", 2.0644f));
			rates.add(new ExchangeRate("Dollar", "New Zealand", 0.357f));
			rates.add(new ExchangeRate("Peso", "Philippines", 11.8f));
			rates.add(new ExchangeRate("New Leu", "Romania", 1.0738f));
			rates.add(new ExchangeRate("Ruble", "Russia", 16.332f));
			rates.add(new ExchangeRate("Krona", "Sweden", 2.2258f));
			rates.add(new ExchangeRate("Dollar", "Singapore", 0.3661f));
			rates.add(new ExchangeRate("Baht", "Thailand", 8.6685f));
			rates.add(new ExchangeRate("Lira", "Turkey", 0.6924f));
			rates.add(new ExchangeRate("Rand", "South Africa", 3.1443f));
			rates.add(new ExchangeRate("Euro", "Euro Member", 0.2416f));
			ratesList = new RatesList("2015-03-07", new ExchangeRate("Zloty", "Poland", 0f), rates);
		}
		return ratesList;
	}
}

Dodajemy dane do adaptera.
ListCurrenciesActivity -> onCreate():

CurrencyListAdapter adapter = new CurrencyListAdapter(this, MockData. getListOfRates());
currencyListView.setAdapter(adapter);